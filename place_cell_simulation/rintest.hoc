// load_file("nrngui.hoc")
// load_file("./shah/shah_invivo.hoc")		// Load Cell Template

objref vecFitX0, vecFitY0	
objref vecFitResultX, vecFitResultY	
double fitVar[7]	


objref testCell
// testcell = new shah("shah")



proc fit_init() {
		vecFitResultX = new Vector()
		vecFitResultY = new Vector()
	}

	//================================================================================
	// Exponential decay

	// Error Function
	func ErrorExponentialDecay() {local amp, x0, y0, tau, error
		y0 = $&2[0]
		amp = $&2[1]
		x0 = $&2[2]
		tau = $&2[3]
		
		error = 0

		for(i=0; i<vecFitX0.size(); i+=1){
			error += (vecFitY0.x[i] - (y0+amp*exp(-(vecFitX0.x[i]-x0)/tau)))^2
		}
		
		//print vecFitY0.x[0], " ", (y0+amp*exp(-(vecFitX0.x[0]-x0)/tau))

		return error
	}

	// Procedure
	proc FitExponentialDecay(){local error, y0, amp, x0, tau
		// X and Y coordinates
		vecFitX0 = $o1
		vecFitY0 = $o2
		
		// Set fitting parameters
		fitVar[0] = $&3
		fitVar[1] = $&4
		fitVar[2] = $&5
		fitVar[3] = $&6
		
		attr_praxis(1e-5, 1, 0)
		// attr_praxis(1e-5, .5, 0)
		error = fit_praxis(4, "ErrorExponentialDecay", &fitVar[0])
		
		$&3 = fitVar[0]
		$&4 = fitVar[1]
		$&5 = fitVar[2]
		$&6 = fitVar[3]
		
		y0 = fitVar[0]
		amp = fitVar[1]
		x0 = fitVar[2]
		tau = fitVar[3]

		//printf("y0=%g amp=%g x0=%g tau=%g error=%g\n", fitVar[0], fitVar[1], fitVar[2], fitVar[3], error)
		
		vecFitResultX.resize(0)
		vecFitResultY.resize(0)
		
		for(i=0; i<vecFitX0.size(); i+=1){
			x = vecFitX0.x[i]
			vecFitResultX.append( x )
			vecFitResultY.append( y0 + amp * exp(-(x-x0)/tau) )
		}
	}
	objref graphFitting
	func rin2() { local V2, V1 localobj cell, stim, vt, vsoma,vecFitResultY
		// if (CellCon.browser_selected() == lib.nil) {
			// lib.printerr("Cell was not specified")
			// break
		// } else{
			// cell = CellCon.browser_selected()
		// }

		vt = new Vector() 
		vt.record(&t)
		vsoma=new Vector()                                     // record voltage at soma and store in vector vsoma  
		vsoma.record(&testCell.soma[0].v(0.5))

		testCell.soma[0] stim = new IClamp(0.5)
		stim.del = 50
		stim.dur = 50
		stim.amp = -0.01

		tstop = stim.del +stim.dur+10//+ ic.del + ic.dur + 50
		run()
		
		
		fit_init()
		

	
		index1 = vt.c.indwhere(">=",stim.del)
		
		index2 = vsoma.min_ind(index1, vsoma.size()-1)
		
		vecFitX0 = vt.c(index1, index2).sub(stim.del)		// Create time vector
		vecFitY0 = vsoma.c(index1, index2)		// Create voltage vector
		
		y0 = -68
		amp = -0.1
		x0 = 0
		tau = 20
		FitExponentialDecay(vecFitX0, vecFitY0, &y0, &amp, &x0, &tau)
		
		print "Tau : ", tau, "ms"
		cell_tau = tau
	
		cell_rin = (vsoma.x(index2) - vsoma.x(index1) )/stim.amp	
		print "InputResistance : " , cell_rin, "MOhm"
		
		return cell_rin
	}
	
	
	// print rin2()